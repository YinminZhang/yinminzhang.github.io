<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Storage Temperatures for HRT Medications]]></title>
    <url>%2F2023%2F08%2F09%2F1%2F</url>
    <content type="text"><![CDATA[本文记录了一些MTF常用的激素治疗(HRT)药物的储存温度,以及一些相关的信息,所有内容仅供参考. 部分数据来自MTF.wiki和tfsci,感谢他们的贡献. 希望大家合理储存药物,避免药物的损坏,谨听医嘱,定期检查身体状况. 雌激素药物 片剂常见的片剂一般在25°或者30°以下,部分建议不要冷藏. 常见的雌激素片剂药物成分包括戊酸雌二醇(Estradiol valerate),雌二醇(Estradiol)以及复方药物等. 其中国产补佳乐(Progynova)1和克龄蒙的保存温度在30°以下. 群友那边信息是新补的说明书中建议在25°以下,泰补的保存温度在30°以下. 诺坤复(Estrofem)在澳洲这边查找到的丹麦诺和诺德(Novo Nordisk)公司说明书2中建议在25°以下,并且不要冷藏. tfsci中提供的说明书3建议保存温度在30°以下,并且不要冷藏. 凝胶常见的凝胶一般在20°以下. 建议密闭,在阴凉处存储(不超过20°).常见商品名称包括: Oestrogel(爱斯妥)4, 健民雌二醇凝胶5. 注: 澳大利亚有凝胶(Sandrena gel)说明书6中建议在25°以下. 针剂常见的针剂一般在20°-25°,部分建议不要冷藏. 常见针剂的药物成分过多7.这边只列举本人查询到的一些常见的针剂药物.其中日雌8建议的保存温度是室温.Estradiol Valerate Injection, USP9建议室温20°-25°保存,低温储存可能会导致一些结晶材料分离，而这些结晶材料在升温时很容易重新溶解。 抗雄药物 色普龙(醋酸环丙孕酮/Cyproterone acetate/CPA)常见的片剂一般在25°或者30°以下. 比安卡(Androcur)10: 30°以下保存.国色(华典醋酸环丙孕酮片)11: 避光密闭.新色(Siterone): 25°以下保存. 螺内酯(Spironolactone)密封干燥保存. 比卡鲁胺片(Bicalutamide)建议保存在30°以下12. References [1] 补佳乐(Progynova) 说明书 [2] Aus Estrofem说明书 [3] 爱斯妥说明书 [4] 健民凝胶说明书 [5] tfsci Estrofem说明书 [6] Sandrena gel说明书 [7] MTF.wiki 针剂介绍 [8] 富士日雌说明书 [9] EV注射剂说明书 [9] EV注射剂说明书 [10] Androcur说明书 [11] 华典CPA说明书 [12] 比卡鲁胺说明书]]></content>
      <tags>
        <tag>Transgender</tag>
        <tag>HRT</tag>
        <tag>Medications</tag>
        <tag>跨性别</tag>
        <tag>激素治疗</tag>
        <tag>药物</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[setup]]></title>
    <url>%2F2021%2F06%2F24%2F1%2F</url>
    <content type="text"><![CDATA[Setup a New Machine!Download, compile and install commonly used software to a custom path. Environment macOS Catalina 10.15.6 (19G73) MacBook Pro (13-inch, 2018, Four Thunderbolt 3 Ports) Processor 2.3 GHz Quad-Core Intel Core i5 Memory 16 GB 2133 MHz LPDDR3 Graphics Intel Iris Plus Graphics 655 1536 MBDarwin 19.6.0 Darwin Kernel Version 19.6.0: Sun Jul 5 00:43:10 PDT 2020; root:xnu-6153.141.1~9/RELEASE_X86_64 x86_64 Term of UsageUsage# configure setup path, you can put them into your `.bashrc` or `.zshrc` # e.g. install git # Install oh my zsh, Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; # Install Vundle, Vundle is short for Vim bundle and is a Vim plugin manager. git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim # Install powerlevel git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k # Update config. git clone https://github.com/YinminZhang/setup.git cp vimrc ~/.vimrc &amp;&amp; cp zshrc ~/.zshrc # Install plugin vim +PluginInstall +qall # source zsh exec zsh Table of Contents iTerm2 zsh vim tmux iTerm2FontAfter font config, the iTerm2 can display many icons. First, we download fonts package. brew tap homebrew/cask-fonts brew cask install font-hack-nerd-font Then, we config the font in iTerm2. Preferences -&gt; Profiles -&gt; Open Profiles -&gt; Edit Profiles -&gt; Text Transparancy &amp; BackgroundWe can set image as iTerm2 background. Preferences -&gt; Profiles -&gt; Open Profiles -&gt; Edit Profiles -&gt; Window Advanced featureStatus bar Preferences -&gt; Profiles -&gt; Open Profiles -&gt; Edit Profiles -&gt; Session zshOh My Zsh is an open source, community-driven framework for managing your zsh configuration.We can install oh my zsh trough curl or wget. # curl sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; # wget sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; I recommend some plugin to improve your develop efficiency. # complete git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # highlight git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # autojump git clone git://github.com/wting/autojump.git &amp;&amp; cd autojump &amp;&amp; ./install.py # gitstatus git clone --depth=1 https://github.com/romkatv/gitstatus.git ~/gitstatus echo &#39;source ~/gitstatus/gitstatus.prompt.zsh&#39; &gt;&gt;! ~/.zshrc You should config plugins in ~/.zshrc and run source ~/.zshrc to make sure the plugins to take effect. Note: zsh-autosuggestions maybe break down, because of TERM type, HIGHLIGHT_STYLE, and plugin confilct. You can try some following commands: # TERM type is not xterm-256color, you can check TERM type through command ``env | grep TERM`` export TERM=xterm-256color echo &quot;export TERM=xterm-256color&quot; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc # change HIGHLIGHT_STYLE echo &quot;ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=yellow&#39;&quot; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc # plugin conflict exec zsh # instead of source ~/.zshrc Theme # powerlevel10k git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k # powerlevel9k for zsh &lt; 5.1 git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k Then, we config ~/.zshrc, set ZSH_THEME to powerlevel10k/powerlevel10k and source ~/.zshrc. vim# ultimate vimrc Awesome version git clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime sh ~/.vim_runtime/install_awesome_vimrc.sh # Vundle is short for Vim bundle and is a Vim plugin manager. git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim vim +PluginInstall +qall # undo &amp;&amp; redo(ctrl+r) # echo &quot;set undofile&quot; &gt;&gt; ~/.vimrc # echo &quot;set undodir=~/.vim/undodir&quot; &gt;&gt; ~/.vimrc mkdir ~/.vim/undodir tmuxTBD pluginfzf]]></content>
  </entry>
  <entry>
    <title><![CDATA[VSCode]]></title>
    <url>%2F2021%2F01%2F11%2F1%2F</url>
    <content type="text"><![CDATA[vscode configureExtensionPython Python Python extension for Visual Studio Code. Python Indent Correct python indentation in Visual Studio Code. Python snippets Python snippets collections. Python Docstring Generator Visual Studio Code extension to quickly generate docstrings for python functions.Remote SFTP sftp sync extension for VS Code. Remote - SSH The Remote - SSH extension lets you use any remote machine with a SSH server as your development environment. C++ C/C++ The C/C++ extension adds language support for C/C++ to Visual Studio Code, including features such as IntelliSense and debugging. CodeLLDB Debugging on Linux (x64 or ARM), macOS and Windows. C/C++ Clang Command Adapter Completion and Diagnostic for C/C++/Objective-C using Clang command. clangd Provides C/C++ language IDE features for VS Code using clangd:Autocomplete and IntelliSense Visual Studio IntelliCode Kite Autocomplete Plugin for Visual Studio Code Others Jupyter Extension for Visual Studio Code IntelliJ IDEA Key Bindings Port of IntelliJ IDEA key bindings for VS Code. Includes keymaps for popular JetBrains products like IntelliJ Ultimate, WebStorm, PyCharm, PHP Storm, etc. language-stylus Adds syntax highlighting and code completion to Stylus files in Visual Studio Code. Markdown PDF This extension converts Markdown files to pdf, html, png or jpeg files. Markdown Preview Enhanced Markdown Preview Enhanced is an extension that provides you with many useful functionalities such as automatic scroll sync, math typesetting, mermaid, PlantUML, pandoc, PDF export, code chunk, presentation writer, etc. LaTeX Workshop LaTeX Workshop is an extension for Visual Studio Code, aiming to provide core features for LaTeX typesetting with Visual Studio Code. ConfigurePythonConfigure environmentSelect environment for python.command + p -&gt; &gt;select interpreterorcommand + shift + p -&gt; select interpreter Debug Extension Python configure launch.json and save launch.json.{ // Python debug configurations in Visual Studio Code: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;python: debug&quot;, // Provides the name for the debug configuration that appears in the VS Code drop-down list. &quot;type&quot;: &quot;python&quot;, &quot;request&quot;: &quot;launch&quot;, // [&#39;launch&#39;, &#39;attach&#39;] // launch: start the debugger on the file specified in program // attach: attach the debugger to an already running process. &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, // Specifies the current working directory for the debugger, which is the base folder for any relative paths used in code. &quot;program&quot;: &quot;${file}&quot;, // Provides the fully qualified path to the python program&#39;s entry module (startup file). &quot;console&quot;: &quot;integratedTerminal&quot;, // Specifies how program output is displayed &quot;args&quot;: [ &quot;--config&quot;, &quot;configcenternet3d_2x.yaml&quot; ] // Specifies arguments to pass to the Python program. } ] } recommand configure for local debugging as following:{ &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;python: debug&quot;, &quot;type&quot;: &quot;python&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, &quot;program&quot;: &quot;${workspaceFolder}/relative/path/filename.py &quot;, &quot;console&quot;: &quot;integratedTerminal&quot;, &quot;args&quot;: [ &quot;--config&quot;, &quot;configcenternet3d_2x.yaml&quot; ] } ] } command + 5 switch to RUN or f5. C++Configure PATH search include path list. gcc -v -E -x c - command + shift + p -&gt; c/c++&quot; Edit Configure type include path list to include path. Debug Extension C/C++ C/C++ Clang Command Adapter CodeLLDB configure launch.json and tasks.json. launch.json{ &quot;name&quot;: &quot;Launch&quot;, &quot;type&quot;: &quot;lldb&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;${workspaceFolder}/{fileBasenameNoExtension}&quot;, // ${workspaceFolder}/&lt;my program&gt; &quot;args&quot;: [&quot;-arg1&quot;, &quot;-arg2&quot;], &quot;preLaunchTask&quot;: &quot;Build with Clang&quot; } tasks.json{ &quot;tasks&quot;: [ { &quot;label&quot;: &quot;Build with Clang&quot;, // same with launch[&quot;preLaunchTask&quot;] &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;clang++&quot;, &quot;args&quot;: [ &quot;-std=c++17&quot;, &quot;-stdlib=libc++&quot;, &quot;${fileBasenameNoExtension}.cpp&quot;, &quot;-o&quot;, &quot;${fileBasenameNoExtension}&quot;, &quot;--debug&quot; ], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true } } ], &quot;version&quot;: &quot;2.0.0&quot; } command + 5 switch to RUN or f5. RemoteRemote - SSH Access remote server to modify, upload and download files. Access remote server to run file(python, cpp etc.). command + shift + p -&gt; remote-ssh: open configuration fileselect config path. config # Read more about SSH config files: https://linux.die.net/man/5/ssh_config Host Name HostName ip # Specifies the real host name to log into. For example, 220.181.38.150 User zhangsan # username Specifies the user to log in as. Port 22 # Specifies the port number to connect on the remote host. The default is 22. select server and file directory to access.]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Discrete Harmonic Map]]></title>
    <url>%2F2019%2F06%2F25%2F1%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;Discrete Harmonic Map (DHM) parameterizes disk-like surfaces by minimizing the Dirichlet energy of the (piece-wise linear) mapping functions. It is super easy to implement (if you are familiar with cotangent-weight Laplacian and have a linear solver at hand, it should take no more than a few hours) and generally gives good results. If you never heard about it, Misha’s class note might be helpful. Source CodeCotangent Edge Weighttemplate&lt;typename M&gt; void CHarmonicMapper&lt;M&gt;::_calculate_edge_weight() { //compute edge length for (M::MeshEdgeIterator eiter(m_pMesh); !eiter.end(); ++eiter) { M::CEdge* pE = *eiter; M::CVertex* v1 = m_pMesh-&gt;edgeVertex1(pE); M::CVertex* v2 = m_pMesh-&gt;edgeVertex2(pE); pE-&gt;length() = (v1-&gt;point() - v2-&gt;point()).norm(); } //compute corner angle for (M::MeshEdgeIterator eiter(m_pMesh); !eiter.end(); ++eiter) { M::CEdge* pE = *eiter; if (pE-&gt;boundary()) continue; for (int i = 0; i &lt; 2; ++i) { M::CHalfEdge* h = m_pMesh-&gt;edgeHalfedge(pE, i); double h_j = m_pMesh-&gt;halfedgeEdge((M::CHalfEdge*)h-&gt;he_next())-&gt;length(); double h_k = m_pMesh-&gt;halfedgeEdge((M::CHalfEdge*)h-&gt;he_prev())-&gt;length(); h-&gt;angle() = _inverse_cosine_law(h_j, h_k, pE-&gt;length()); } } //compute edge weight for (M::MeshEdgeIterator eiter(m_pMesh); !eiter.end(); ++eiter) { M::CEdge* pE = *eiter; M::CHalfEdge* h0 = m_pMesh-&gt;edgeHalfedge(pE, 0); M::CHalfEdge* h1 = m_pMesh-&gt;edgeHalfedge(pE, 1); pE-&gt;weight() = 0.5 * (1 / tan(h0-&gt;angle() + 1 / tan(h1-&gt;angle()))); } } Set Boundary Conditiontemplate&lt;typename M&gt; void CHarmonicMapper&lt;M&gt;::_set_boundary() { //get the boundary half edge loop std::vector&lt;M::CLoop*&gt; &amp; pLs = m_boundary.loops(); assert( pLs.size() == 1 ); M::CLoop * pL = pLs[0]; std::list&lt;M::CHalfEdge*&gt; &amp; pHs = pL-&gt;halfedges(); //compute the total length of the boundary double total_length = pL-&gt;length(); //parameterize the boundary using arc length parameter double current_length = 0; for (std::list&lt;M::CHalfEdge*&gt;::iterator hiter = pHs.begin(); hiter != pHs.end(); hiter++) { M::CHalfEdge* pH = *hiter; M::CEdge* pE = m_pMesh-&gt;halfedgeEdge(pH); current_length += pE-&gt;length(); double angle = 2 * PI / total_length * current_length; MeshLib::CPoint2* huv = new MeshLib::CPoint2(0.5 + 0.5 * cos(angle), 0.5 + 0.5 * sin(angle)); M::CVertex* pV = m_pMesh-&gt;halfedgeTarget(pH); pV-&gt;huv() = *huv; } } Iterative Algorithm for Harmonic Maptemplate&lt;typename M&gt; void CHarmonicMapper&lt;M&gt;::_iterative_map( double epsilon ) { //fix the boundary _set_boundary(); //move interior each vertex to its center of neighbors for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (pV-&gt;boundary()) continue; MeshLib::CPoint2* huv = new MeshLib::CPoint2(0, 0); pV-&gt;huv() = *huv; } while (true) { double error = -1e+10; //move interior each vertex to its center of neighbors for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (pV-&gt;boundary()) continue; double total_weight = 0; CPoint2 huv(0, 0); for (M::VertexVertexIterator vviter(pV); !vviter.end(); ++vviter) { M::CVertex* pW = *vviter; M::CEdge* pE = m_pMesh-&gt;vertexEdge(pV, pW); double weight = pE-&gt;weight(); total_weight += weight; huv = huv + pW-&gt;huv() * weight; } huv = huv / total_weight; double _error = (pV-&gt;huv() - huv).norm(); error = (_error &gt; error) ? _error : error; pV-&gt;huv() = huv; } if (error &lt; epsilon) break; } } Direct Algorithm for Harmonic Map (Extra Credit) &amp; Numerical Methodtemplate&lt;typename M&gt; void CHarmonicMapper&lt;M&gt;::_map() { //fix the boundary _set_boundary(); std::vector&lt;Eigen::Triplet&lt;double&gt; &gt; A_coefficients; std::vector&lt;Eigen::Triplet&lt;double&gt; &gt; B_coefficients; //set the matrix A for( M::MeshVertexIterator viter( m_pMesh ); !viter.end(); ++ viter ) { M::CVertex * pV = *viter; if( pV-&gt;boundary() ) continue; int vid = pV-&gt;idx(); double sw = 0; for( M::VertexVertexIterator witer( pV ); !witer.end(); ++ witer ) { M::CVertex * pW = *witer; int wid = pW-&gt;idx(); M::CEdge * e = m_pMesh-&gt;vertexEdge( pV, pW ); double w = e-&gt;weight(); if( pW-&gt;boundary() ) { B_coefficients.push_back( Eigen::Triplet&lt;double&gt;(vid,wid,w) ); } else { A_coefficients.push_back( Eigen::Triplet&lt;double&gt;(vid,wid, -w) ); } sw += w; } A_coefficients.push_back( Eigen::Triplet&lt;double&gt;(vid,vid, sw ) ); } Eigen::SparseMatrix&lt;double&gt; A( m_interior_vertices, m_interior_vertices ); A.setZero(); Eigen::SparseMatrix&lt;double&gt; B( m_interior_vertices, m_boundary_vertices ); B.setZero(); A.setFromTriplets(A_coefficients.begin(), A_coefficients.end()); B.setFromTriplets(B_coefficients.begin(), B_coefficients.end()); Eigen::ConjugateGradient&lt;Eigen::SparseMatrix&lt;double&gt;&gt; solver; std::cerr &lt;&lt; &quot;Eigen Decomposition&quot; &lt;&lt; std::endl; solver.compute(A); std::cerr &lt;&lt; &quot;Eigen Decomposition Finished&quot; &lt;&lt; std::endl; if( solver.info() != Eigen::Success ) { std::cerr &lt;&lt; &quot;Waring: Eigen decomposition failed&quot; &lt;&lt; std::endl; } for( int k = 0; k &lt; 2; k ++ ) { Eigen::VectorXd b(m_boundary_vertices); //set boundary constraints b vector for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (!pV-&gt;boundary()) continue; int id = pV-&gt;idx(); b(id) = pV-&gt;huv()[k]; } Eigen::VectorXd c(m_interior_vertices); c = B * b; Eigen::VectorXd x = solver.solve(c); if( solver.info() != Eigen::Success ) { std::cerr &lt;&lt; &quot;Waring: Eigen decomposition failed&quot; &lt;&lt; std::endl; } //set the images of the harmonic map to interior vertices for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (pV-&gt;boundary()) continue; int id = pV-&gt;idx(); pV-&gt;huv()[k] = x(id); } } } AlgorithmCotangent Edge WeightCompute edge lengthCompute the edge length, suppose $e = [v_i , v_j ]$, then$$l(e) = |v_j − v_i |.$$ - use $MeshEdgeIterator$ to find all of edges on m_pMesh - use $m_pMesh->halfedgeVertex1(Edge)$ to find the first vertex of an edge - use $m_pMesh->halfedgeVertex2(Edge)$ to find the second vertex of an edge - $point.norm()$ calculate the norm of the CPoint $\sqrt{x^2+y^2+z^2}$ for (M::MeshEdgeIterator eiter(m_pMesh); !eiter.end(); ++eiter) { M::CEdge* pE = *eiter; M::CVertex* v1 = m_pMesh-&gt;edgeVertex1(pE); M::CVertex* v2 = m_pMesh-&gt;edgeVertex2(pE); pE-&gt;length() = (v1-&gt;point() - v2-&gt;point()).norm(); } Compute corner angle Compute the corner angles of each triangular face, suppose $[v_i , v_j , v_k ]$ is a face, with edges $e_i , e_j , e_k ,$ where e_i is against the vertex v_i . The corresponding edge lengths are $l_i , l_j$ and $l_k$ . The inversive cosine law gives $$ \theta_i = acos \frac {l_j^2 + l_k^2 -l_i^2} {2 l_j l_k} $$ - use $MeshEdgeIterator$ to find all of edges on m_pMesh - use $pE->boundary()$ to judge whether the edge is on the boundary - use $m_pMesh->halfedgeEdge(halfedge)$ to attach halfedge to an edge - use $halfedge->he\_next()$ to find the next halfedge of a halfedge - $\_inverse\_cosine\_law(l_j,l_k,l_i)$ calculate the acos for (M::MeshEdgeIterator eiter(m_pMesh); !eiter.end(); ++eiter) { M::CEdge* pE = *eiter; if (pE-&gt;boundary()) continue; for (int i = 0; i &lt; 2; ++i) { M::CHalfEdge* h = m_pMesh-&gt;edgeHalfedge(pE, i); double h_j = m_pMesh-&gt;halfedgeEdge((M::CHalfEdge*)h-&gt;he_next())-&gt;length(); double h_k = m_pMesh-&gt;halfedgeEdge((M::CHalfEdge*)h-&gt;he_prev())-&gt;length(); h-&gt;angle() = _inverse_cosine_law(h_j, h_k, pE-&gt;length()); } } Compute edge weight The cotangent edge weight is as follows. Suppose edge $[v_i , v_j , v_k ] $ and $[v_j , v_i , v_l ]$ share an edge $[v_i , v_j ]$, then $$w_{ij}=\frac 1 2 (cot\theta_k^{ij} + cot\theta_l^{ji})$$ - use $Edge->weight()$ to get the weight of edge - use $HalfEdge->angle()$ to get the angle of halfege - use $1/ tan(\theta)$ to calculate $cot\theta$ for (M::MeshEdgeIterator eiter(m_pMesh); !eiter.end(); ++eiter) { M::CEdge* pE = *eiter; M::CHalfEdge* h0 = m_pMesh-&gt;edgeHalfedge(pE, 0); M::CHalfEdge* h1 = m_pMesh-&gt;edgeHalfedge(pE, 1); pE-&gt;weight() = 0.5 * (1 / tan(h0-&gt;angle() + 1 / tan(h1-&gt;angle()))); } Set Boundary ConditionGet the boundary half edge loop - use $Boundary.loops()$ to get the list of boundary loops - use $Loop->halfedge()$ to get the the list of haledges on the current boundary loop std::vector&lt;M::CLoop*&gt; &amp; pLs = m_boundary.loops(); assert( pLs.size() == 1 ); M::CLoop * pL = pLs[0]; std::list&lt;M::CHalfEdge*&gt; &amp; pHs = pL-&gt;halfedges(); Compute the total length of the boundary Suppose the boundary vertices are sorted counter-clock-wisely, as $\{v_0 , v_1 , · · · , v_{n−1} \}$. The total length of the boundary is given by $$s = \sum_{i=0}^{n-1}|v_{i+1}-v_i| $$ - use $Loop->length()$ to get the length of the current boundary loop double total_length = pL-&gt;length(); Parameterize the boundary using arc length parameter The image of $v_i \in \partial M$ is given by $$\begin{cases} \theta_i = \frac {2\pi} s \sum_{j=0}^{i-1}|v_{j+1}- v_j|\\ \phi(v_i)=(\frac {1+cos\theta_i} 2, \frac {1+sin\theta_i} 2) \end{cases}$$ double current_length = 0; for (std::list&lt;M::CHalfEdge*&gt;::iterator hiter = pHs.begin(); hiter != pHs.end(); hiter++) { M::CHalfEdge* pH = *hiter; M::CEdge* pE = m_pMesh-&gt;halfedgeEdge(pH); current_length += pE-&gt;length(); double angle = 2 * PI / total_length * current_length; MeshLib::CPoint2* huv = new MeshLib::CPoint2(0.5 + 0.5 * cos(angle), 0.5 + 0.5 * sin(angle)); M::CVertex* pV = m_pMesh-&gt;halfedgeTarget(pH); pV-&gt;huv() = *huv; } Iterative Algorithm for Harmonic Map First, for each interior vertex $v_i \notin \partial M$, set $\phi(v_i ) = (0, 0)$. Second, for each interior vertex, move its image to the mass center of the images of its neighbors, $$c_i = \frac {\sum_j w_{ij}\phi(v_j)} {\sum_j w_ij}, \phi(v_i)\leftarrow c_i$$ repeat this procedure, until the algorithm converges. For each interior vertex $v_i \notin \partial M$, set $\phi(v_i ) = (0, 0)$ - use $pE->boundary()$ to judge whether the edge is on the boundary for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (pV-&gt;boundary()) continue; MeshLib::CPoint2* huv = new MeshLib::CPoint2(0, 0); pV-&gt;huv() = *huv; } Move interior each vertex to its center of neighbors - use $MeshVertexIterator$ to find all of edges on m_pMesh - use $VertexVertexIterator$ to transverse all the neighboring vertices of a vertex - use $Edge->vertexEdge(vertex0, vertex2)$ to access an edge by its two end vertices - use $m_pMesh->weight()$ to get the weight of edge - use $Vertex->huv()$ to get the $\phi(v_i)$ of interior vertex while (true) { double error = -1e+10; for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (pV-&gt;boundary()) continue; double total_weight = 0; CPoint2 huv(0, 0); for (M::VertexVertexIterator vviter(pV); !vviter.end(); ++vviter) { M::CVertex* pW = *vviter; M::CEdge* pE = m_pMesh-&gt;vertexEdge(pV, pW); double weight = pE-&gt;weight(); total_weight += weight; huv = huv + pW-&gt;huv() * weight; } huv = huv / total_weight; double _error = (pV-&gt;huv() - huv).norm(); error = (_error &gt; error) ? _error : error; pV-&gt;huv() = huv; } if (error &lt; epsilon) break; } Direct Algorithm for Harmonic Map (Extra Credit)For each interior vertex $v_i \notin \partial M$, establish one linear equation $$\sum_j w_{ij}(\phi(v_i)-\phi(v_j)) = 0$$ solve this sparse linear system, the result is the harmonic map. //set boundary constraints b vector for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (!pV-&gt;boundary()) continue; int id = pV-&gt;idx(); b(id) = pV-&gt;huv()[k]; } //set the images of the harmonic map to interior vertices for (M::MeshVertexIterator viter(m_pMesh); !viter.end(); ++viter) { M::CVertex* pV = *viter; if (pV-&gt;boundary()) continue; int id = pV-&gt;idx(); pV-&gt;huv()[k] = x(id); } This assignment uses Eigen library to solve large sparse linear system. The following commands will be useful. std::vector&lt;Eigen::Triplet&lt;double&gt; &gt; A_coefficients; A_coefficients.push_back( Eigen::Triplet&lt;double&gt;(vid,wid, -w) ); Eigen::SparseMatrix&lt;double&gt; A( m_interior_vertices, m_interior_vertices ); A.setZero(); A.setFromTriplets(A_coefficients.begin(), A_coefficients.end()); Eigen::ConjugateGradient&lt;Eigen::SparseMatrix&lt;double&gt;&gt; solver; std::cerr &lt;&lt; &quot;Eigen Decomposition&quot; &lt;&lt; std::endl; solver.compute(A); std::cerr &lt;&lt; &quot;Eigen Decomposition Finished&quot; &lt;&lt; std::endl; if( solver.info() != Eigen::Success ) { std::cerr &lt;&lt; &quot;Waring: Eigen decomposition failed&quot; &lt;&lt; std::endl; } Eigen::VectorXd b(m_boundary_vertices); Eigen::VectorXd x = solver.solve(c); if( solver.info() != Eigen::Success ) { std::cerr &lt;&lt; &quot;Waring: Eigen decomposition failed&quot; &lt;&lt; std::endl; } ResultIn this section, we show the result of harmonic mapping separately. Direct Algorithm for Harmonic Map(Fig. 3.1 &amp; Fig. 3.2) Iterative Algorithm for Harmonic Map(Fig. 3.3) Fig. 3.1. Harmonic Map On Alex Fig. 3.2. Harmonic Map On Sophie Fig. 3.3. Iterative Harmonic Map On Sophie Data from sophie.uv.m Vertex 54475 103.073 50.793 26.4526 {rgb=(0.117956 0.117956 0.117956) uv=(0.999907 0.490347)} Vertex 54480 107.076 50.7952 27.7994 {rgb=(0.151779 0.151779 0.151779) uv=(0.999013 0.468605)} Vertex 54487 108.817 50.7937 28.1584 {rgb=(0.156541 0.156541 0.156541) uv=(0.998355 0.459469)} Vertex 54496 114.037 50.795 29.4016 {rgb=(0.174857 0.174857 0.174857) uv=(0.995353 0.431987)} Vertex 54505 117.28 50.7941 29.6458 {rgb=(0.16433 0.16433 0.16433) uv=(0.992795 0.415427)}Data generated by Direct Algorithm for Harmonic Map Vertex 54475 0.999907 0.490347 0 {rgb=(0.117956 0.117956 0.117956)} Vertex 54480 0.999013 0.468605 0 {rgb=(0.151779 0.151779 0.151779)} Vertex 54487 0.998355 0.459469 0 {rgb=(0.156541 0.156541 0.156541)} Vertex 54496 0.995353 0.431987 0 {rgb=(0.174857 0.174857 0.174857)} Vertex 54505 0.992795 0.415427 0 {rgb=(0.16433 0.16433 0.16433)}Data generated by Iterative Algorithm for Harmonic Map Vertex 54475 0.999907 0.490347 0 {rgb=(0.117956 0.117956 0.117956)} Vertex 54480 0.999013 0.468605 0 {rgb=(0.151779 0.151779 0.151779)} Vertex 54487 0.998355 0.459469 0 {rgb=(0.156541 0.156541 0.156541)} Vertex 54496 0.995353 0.431987 0 {rgb=(0.174857 0.174857 0.174857)} Vertex 54505 0.992795 0.415427 0 {rgb=(0.16433 0.16433 0.16433)}]]></content>
      <categories>
        <category>Computer vision</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Computer vision</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Image Warpper]]></title>
    <url>%2F2019%2F06%2F23%2F1%2F</url>
    <content type="text"><![CDATA[Bezier Curve Evaluation AlgorithmA bézier line is an arc that is strictly based on a set number of points instead of on an ellipse. A bézier curve uses at least four points to draw on. Bézier curves can be combined to form a Bézier spline, or generalized to higher dimensions to form Bézier surfaces Linear Bézier curvesGiven distinct points $P_0$ and $P_1$, a linear Bézier curve is simply a straight line between those two points. The curve is given by$$B ( t ) = P_0 + t ( P_1-P_0) = (1 - t)P_0 + tP_1 , 0 \leq t \leq 1$$The coeficients, $b_i$ are the control points or Bézier points and together with the basis function $B_{i,n}(t)$determine the shape of the curve. Lines drawn between consecutive control points of the curve form the control polygon. A cubic Bezier curve together with its control polyg`on is shown in Fig. 1.1. Bezier curves have the following properties: Geometry invariance property: Partition of unity property of the Bernstein polynomial assures the invariance of the shape of the Bézier curve under translation and rotation of its control points ![avatar](./Bezier curve.png)Fig. 1.1. $Slerp(p, q, t)$, linear interplate two control points $p$ and $q$, inline CPoint CBezier::lerp( CPoint &amp; p, CPoint &amp; q, double t ) { CPoint r = p * ( 1- t) + q * t; return r; }; $deBoor(C0, C1, C2, C3, t)$, compute a point on the Bezier curve at parametert inline CPoint CBezier::deBoor( CPoint &amp; c0, CPoint &amp; c1, CPoint &amp; c2, CPoint &amp; c3, double t ) { //Modify this procedure CPoint C01 = lerp( c0, c1, t ); CPoint C12 = lerp( c1, c2, t ); CPoint C23 = lerp( c2, c3, t ); CPoint C012 = lerp( C01, C12, t ); CPoint C123 = lerp( C12, C23, t ); CPoint C0123 = lerp( C012, C123, t ); return C0123; }; Bezier Surface Evaluation Algorithm Given a control net $C[4][4]$, and $2D$ parameters $uv$, evaluate the point on the Bezier surface constructed from the control net at the parameters $uv$, the algorithm evaluate the point p[k] on four Bezier curves controlled by points m_control_net$[k][0]$, m_control_net$[k][1]$, m_control_net$[k][2]$, m_control_net$[k][3]$, then evaluate the point on the Bezier curve controlled by $D[0], D[1], D[2], uv[3]$. inline CPoint CBezier::evaluate( CPoint2 uv ) { //Modify this procedure CPoint D[4]; for (int k = 0; k &lt; 4; k++) { D[k] = deBoor(m_control_net[k][0], m_control_net[k][1], m_control_net[k][2], m_control_net[k][3], uv[0]); } CPoint r = deBoor( D[0], D[1], D[2], D[3], uv[1] ); return r; }; Image Warpping The image is embedded in the unit square, the unit square is deformed by a nonlinear mapping $\phi :S \rightarrow \Re^2 $, where $S$ is the unit square. The mapping is modeled as Bezier surface, controlled by the control net. $$\phi(u, v) = \sum_{i=0}^3\sum_{j=0}^3B_3^i(u)B_3^j(v)C_{ij},$$where ${C_{ij} }$ form the control net,$B_3^i$ is the Bernstein polynomial, $$B_3^i(t) = C_3^i(1 − t)^i t^{3−i} ,$$ SummaryResult Fig. 4.1. Image Warpper On Brad Pitt Fig. 4.2. Image Warpper On Lake Fig. 4.3. Image Warpper On Wu Explain your algorithm for each requirement 1. The first algorithm generates Bezier Line by $Slerp(p, q, t)$ and $deBoor(C0, C1, C2, C3, t)$ The second algorithm generates Bezier Surface by iterating $deBoor(C0, C1, C2, C3, t)$]]></content>
      <categories>
        <category>Computer vision</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Computer vision</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
</search>
